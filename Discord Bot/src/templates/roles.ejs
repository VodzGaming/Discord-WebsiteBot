<style>
  input, select, textarea{ width:100%; padding:.6rem .7rem; border-radius:10px; border:1px solid #2b2d31; background:#0f131c; color:#e8eaf0 }
  .panel{ background:#12171d; border-radius:10px; padding:16px; border:1px solid rgba(255,255,255,.03) }
  .grid{ display:grid; grid-template-columns:1fr; gap:12px }
  .row{ display:flex; gap:12px; flex-wrap:wrap }
  .muted{ color:#9aa3ad }
  .settings-grid{ display:grid; grid-template-columns: 320px 1fr; gap:16px }
  @media(max-width:1100px){ .settings-grid{ grid-template-columns:1fr } }
  .sidebar{ background:#0f131c; border:1px solid rgba(255,255,255,.06); border-radius:10px; padding:12px }
  .btn-small{ padding:6px 10px; border-radius:8px; background:#1b2130; border:1px solid #2a3142; color:#e5e7eb; cursor:pointer }
  .card{ background:#0f131c; border:1px solid rgba(255,255,255,.06); border-radius:10px; padding:14px }
  .section-title{ font-weight:800; color:#cdd1db; margin:0 0 8px }
  .field{ margin-bottom:12px }
  .field label{ display:block; font-weight:600; color:#c9cbd1; margin-bottom:6px }
  .tabs{ display:flex; gap:6px; margin:10px 0 }
  .tab{ padding:6px 10px; border-radius:999px; border:1px solid #2b2f36; background:#0f131c; color:#d7d9df; cursor:pointer }
  .tab.active{ background:#1d2331; border-color:#49516a }
  .list{ display:flex; flex-direction:column; gap:8px }
  .list .item{ display:flex; gap:8px; align-items:center }
  .item input[type="text"], .item select{ flex:1 }
  .row-split{ display:flex; gap:12px; flex-wrap:wrap }
  .emoji-pop{ position:absolute; z-index:10000; background:#0f131c; border:1px solid #2a3142; border-radius:10px; padding:8px; width:360px; max-height:360px; overflow:auto; box-shadow: 0 8px 30px rgba(0,0,0,.5) }
  .emoji-pop .tabs{ display:flex; gap:6px; margin:0 0 8px }
  .emoji-pop .tabs .tab{ padding:4px 8px; border-radius:999px; border:1px solid #2b2f36; background:#12171d; color:#d7d9df; cursor:pointer }
  .emoji-pop .tabs .tab.active{ background:#1d2331; border-color:#49516a }
  .emoji-grid{ display:grid; grid-template-columns: repeat(9, 1fr); gap:6px }
  .emoji-cell{ display:flex; align-items:center; justify-content:center; height:36px; border-radius:6px; cursor:pointer; border:1px solid transparent }
  .emoji-cell:hover{ background:#1b2130; border-color:#2a3142 }
</style>

<div class="container">
  <h2 style="margin:0 0 12px">Reaction Roles</h2>
  <div class="settings-grid">
      <div class="sidebar">
        <a class="btn-small" href="/dashboard/guild/<%= guild ? guild.id : '' %>/roles/menus">Open Reaction Menus</a>
      </div>
      <div>
        <div class="card">
          <div class="section-title">Message Settings</div>
          <div class="field"><label>Name</label><input id="rr-name" type="text" placeholder="Give it a unique name"/></div>
          <div class="field"><label>Channel</label><select id="rr-channel"><option value="">Select Channel</option>
            <% (textChannels||[]).forEach(c=>{ %>
              <option value="<%= c.id %>">#<%= c.name %></option>
            <% }) %>
          </select></div>
          <div class="row-split">
            <div class="field" style="min-width:180px"><label>Message Type</label><div class="tabs" id="msg-type-tabs"><button class="tab" data-type="plain">Plain</button><button class="tab" data-type="embed">Embed</button><button class="tab" data-type="existing">Existing</button></div></div>
            <div class="field" style="min-width:180px"><label>Selection Type</label><div class="tabs" id="sel-type-tabs"><button class="tab active" data-type="reactions">Reactions</button><button class="tab" data-type="buttons">Buttons</button><button class="tab" data-type="dropdowns">Dropdowns</button></div></div>
          </div>
          <div id="embed-builder" class="field" style="display:none"><label>Embed Title</label><input id="rr-title" type="text" placeholder="Title"/><label style="margin-top:6px">Embed JSON (optional)</label><textarea id="rr-embed" placeholder='{"description":"React to get roles"}' style="min-height:110px"></textarea></div>
          <div id="existing-builder" class="field" style="display:none">
            <label>Message Link or ID</label>
            <input id="rr-existing-id" type="text" placeholder="https://discord.com/channels/<guild>/<channel>/<message> or message ID"/>
            <div class="muted" style="margin-top:6px">Note: Existing message works only with Selection Type = Reactions.</div>
          </div>
        </div>
        <div class="card" style="margin-top:12px">
          <div class="section-title">Reactions and Roles</div>
          <div class="list" id="pairs"></div>
          <button class="btn-small" id="add-pair" style="margin-top:8px">Add reaction</button>
          <div class="muted" id="pairs-tip" style="margin-top:6px">Tip: Add up to 5. Choose an emoji, then pick a role. For custom Discord emoji, paste its <:name:id> or ID into the small box.</div>
        </div>
        <div class="card" style="margin-top:12px">
          <div class="section-title">Options</div>
          <div class="row-split">
            <label style="display:flex;align-items:center;gap:8px"><input type="checkbox" id="rr-allow-multi"/> Allow picking multiple roles</label>
            <label style="display:flex;align-items:center;gap:8px"><input type="checkbox" id="rr-reverse-mode"/> Reverse mode (click again removes)</label>
          </div>
          <div class="row-split" style="margin-top:8px">
            <div style="flex:1"><label>Allowed Roles (optional)</label><input id="rr-allowed" placeholder="Comma separated role IDs"/></div>
            <div style="flex:1"><label>Ignored Roles (optional)</label><input id="rr-ignored" placeholder="Comma separated role IDs"/></div>
          </div>
          <div style="margin-top:12px"><button class="btn-small" id="publish">Publish</button></div>
          <div id="rr-status" class="muted" style="margin-top:6px; min-height:18px"></div>
        </div>
      </div>
  </div>
</div>

<script>
      (function(){
        const roleList = <%- JSON.stringify(roleList||[]) %>;
        const emojis = <%- JSON.stringify(emojis||[]) %>;
        const pairsHost = document.getElementById('pairs');
        const MAX_PAIRS = 5;
        function updateAddBtnState(){
          const addBtn = document.getElementById('add-pair');
          const count = pairsHost.querySelectorAll('.item').length;
          addBtn.disabled = count >= MAX_PAIRS;
          document.getElementById('pairs-tip').textContent = count >= MAX_PAIRS ? 'You reached the limit of 5 pairs.' : 'Tip: Add up to 5. Choose an emoji, then pick a role. For custom Discord emoji, paste its <:name:id> or ID into the small box.';
        }
        function addPairRow(emoji='', roleId=''){
          const d=document.createElement('div'); d.className='item';
          d.innerHTML =
            '<button type="button" class="btn-small emoji-btn" title="Pick emoji">+'+ (emoji? ' '+emoji : '') +'</button>'+
            '<input class="emoji-val" type="hidden" value="'+emoji+'" />'+
            '<input class="emoji-manual" placeholder=":custom: or ID" style="max-width:160px" />'+
            '<select class="role"><option value="">Select role</option>'+(roleList).map(r=>'<'+'option value="'+r.id+'"'+(r.id===roleId?' selected':'')+'>@'+r.name+'</option>').join('')+'</select>'+
            '<button type="button" class="btn-small rm" title="Remove">âœ•</button>';
          d.querySelector('.rm').addEventListener('click', ()=>{ d.remove(); updateAddBtnState(); });
          const btn = d.querySelector('.emoji-btn');
          const val = d.querySelector('.emoji-val');
          btn.addEventListener('click', (ev)=>{
            if(typeof window.__openEmojiLocalPicker === 'function'){
              window.__openEmojiLocalPicker(btn, (picked)=>{ if(!picked) return; val.value=picked; btn.textContent = '+ ' + picked; });
              return;
            }
            const v = prompt('Type an emoji (unicode):', val.value||''); if(v!=null){ val.value=v; btn.textContent = '+ '+v; }
          });
          pairsHost.appendChild(d);
          updateAddBtnState();
        }
        document.getElementById('add-pair').addEventListener('click', ()=> addPairRow());
        addPairRow();
        function setupTabs(id, onChange){
          const wrap=document.getElementById(id); if(!wrap) return { get:()=>null };
          let current=(wrap.querySelector('.tab.active')?.dataset.type)||null;
          wrap.querySelectorAll('.tab').forEach(b=> b.addEventListener('click', ()=>{ wrap.querySelectorAll('.tab').forEach(x=>x.classList.remove('active')); b.classList.add('active'); current=b.dataset.type; onChange&&onChange(current); }));
          return { get:()=>current };
        }
        const msgTabs = setupTabs('msg-type-tabs', (t)=>{
          document.getElementById('embed-builder').style.display = (t==='embed')? 'block':'none';
          document.getElementById('existing-builder').style.display = (t==='existing')? 'block':'none';
        });
        const selTabs = setupTabs('sel-type-tabs');
        const statusEl = document.getElementById('rr-status');
        function setStatus(msg, bad){ statusEl.textContent = msg||''; statusEl.style.color = bad? '#ef476f':'#98a0ab'; }
        document.getElementById('publish').addEventListener('click', async ()=>{
          try{
            const name = document.getElementById('rr-name').value.trim();
            const channel_id = document.getElementById('rr-channel').value.trim();
            const message_type = msgTabs.get();
            const selection_type = selTabs.get();
            const title = document.getElementById('rr-title').value.trim();
            const embed_json = document.getElementById('rr-embed').value.trim();
            const allow_multi = document.getElementById('rr-allow-multi').checked ? '1':'0';
            const reverse_mode = document.getElementById('rr-reverse-mode').checked ? '1':'0';
            const allowed_roles = document.getElementById('rr-allowed').value.trim();
            const ignored_roles = document.getElementById('rr-ignored').value.trim();
            const pairs = Array.from(document.querySelectorAll('#pairs .item')).map(it=>{
              const val = it.querySelector('.emoji-val').value.trim();
              const manual = it.querySelector('.emoji-manual').value.trim();
              return { emoji: (val || manual), role_id: it.querySelector('.role').value.trim() };
            }).filter(x=>x.role_id);
            if(!channel_id){ setStatus('Pick a channel', true); return; }
            if(!pairs.length){ setStatus('Add at least one reaction/role pair', true); return; }
            const body = new URLSearchParams();
            body.set('channel_id', channel_id);
            body.set('title', title || name || 'Choose your roles');
            pairs.forEach(p=>{ body.append('role_ids', p.role_id); if(p.emoji){ body.set('emoji_'+p.role_id, p.emoji); } });
            body.set('name', name); body.set('message_type', message_type); body.set('selection_type', selection_type);
            body.set('embed_json', embed_json); body.set('allow_multi', allow_multi); body.set('reverse_mode', reverse_mode);
            body.set('allowed_roles', allowed_roles); body.set('ignored_roles', ignored_roles);
            if(message_type==='existing'){
              const existing = document.getElementById('rr-existing-id').value.trim();
              if(!existing){ setStatus('Provide a message link or ID for Existing Message.', true); return; }
              body.set('existing_message_id', existing);
              if(selection_type!=='reactions'){ setStatus('Existing Message only supports Reactions selection type.', true); return; }
            }
            const resp = await fetch('/dashboard/guild/<%= guild ? guild.id : '' %>/roles/menu', { method:'POST', headers:{ 'Content-Type':'application/x-www-form-urlencoded', 'X-Requested-With':'XMLHttpRequest' }, body });
            if(!resp.ok){ const t=await resp.text(); throw new Error(t||('HTTP '+resp.status)); }
            setStatus('Published!', false);
          }catch(e){ setStatus(e?.message||'Failed to publish', true); }
        });
      })();
    </script>
